- name: Set portainer_stack_name
  set_fact:
    portainer_stack_name: "{{ service_name }}-{{ item }}"

- name: Check if stack exists in Portainer for {{ item }}
  ansible.builtin.uri:
    url: "{{ portainer_api_url }}/stacks?filters={\"EndpointId\":{{ existing_endpoints_map[item] }}}"
    method: GET
    headers:
      Authorization: "Bearer {{ portainer_api_token }}"
      Content-Type: "application/json"
    status_code: 200
  register: portainer_stacks_response

- name: Get stack matching name
  set_fact:
    stack_candidates: "{{ portainer_stacks_response.json | selectattr('Name', 'equalto', portainer_stack_name) | list }}"

- name: Find stack by name
  set_fact:
    portainer_stack_found: "{{ stack_candidates[0] }}"
  when: stack_candidates | length > 0

- name: Set fact if stack exists
  ansible.builtin.set_fact:
    stack_exists: "{{ portainer_stack_found is defined }}"

- name: Deploy or update Traefik stack for {{ item }}
  ansible.builtin.shell: |
    # Using curl instead of ansible.builtin.uri to ensure correct file uploads
    curl -X POST "{{ portainer_api_url_remote }}/stacks/create/standalone/file?endpointId={{ existing_endpoints_map[item] }}" \
      -H "Authorization: Bearer {{ portainer_api_token }}" \
      -F "Name=traefik-{{ item }}" \
      -F "Env=[{\"name\": \"CF_DNS_API_TOKEN\", \"value\": \"{{ cloudflare_dns_api_token }}\"}]" \
      -F "file=@{{ docker_compose_output }}"
  delegate_to: localhost
  when: traefik_compose_file.changed or not stack_exists

- name: Set portainer_stack_name
  set_fact:
    rewrite_domain: "{{ traefik_subdomain_prefix }}-{{ item }}.{{ cluster_domain }}"

- name: Get AdGuard Home rewrite list for {{ item }}
  uri:
    url: "{{ adguardhome_url }}/control/rewrite/list"
    method: GET
    headers:
      Authorization: "Basic {{ (adguardhome_admin_user + ':' + adguardhome_admin_password) | b64encode }}"
      Content-Type: "application/json"
    status_code: 200
  register: adguardhome_rewrites
  delegate_to: dns

- name: Check if rewrite already exists for {{ item }}
  set_fact:
    rewrite_exists: "{{ adguardhome_rewrites.json | selectattr('domain', 'equalto', rewrite_domain) | list | length > 0 }}"

- name: Add new rewrite rule if not exists for {{ item }}
  uri:
    url: "{{ adguardhome_url }}/control/rewrite/add"
    method: POST
    headers:
      Authorization: "Basic {{ (adguardhome_admin_user + ':' + adguardhome_admin_password) | b64encode }}"
    body_format: json
    body:
      domain: "{{ rewrite_domain }}"
      answer: "{{ hostvars[item].ansible_host }}"
    status_code: 200
  delegate_to: dns
  when: not rewrite_exists
  changed_when: true