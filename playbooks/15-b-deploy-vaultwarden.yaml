---
- name: Deploy VaultWarden through Portainer
  hosts: management
  gather_facts: false
  become: no
  vars:
    service_name: "vaultwarden"
    destination_host: "tracking"
    container_name: "{{ service_name }}"
    subdomain: "passwords"
    docker_compose_template: "vaultwarden/vaultwarden-compose.yaml.j2"
    docker_compose_output: "{{ cluster_output_path }}/docker-compose/vaultwarden-compose.yaml"
    vaultwarden_config_output_dir: "{{ cluster_output_path }}/configs/vaultwarden"
    ports:
      - ext: "{{ vaultwarden_frontend_port }}"
        int: 80
    storage_base_dir: "/storage/{{ service_name }}"
    vaultwarden_data_dir: "{{ storage_base_dir }}/data"
    volumes:
      - src: "{{ vaultwarden_data_dir }}"
        dst: "/data"
        type: dir
  vars_files:
    - vars/common.yaml
    - "{{ inventory_dir }}/docker-images.yaml"
    - "{{ inventory_dir }}/secrets.yaml"
    - "{{ inventory_dir }}/docker-ports.yaml"

  tasks:
    - name: Set Vaultwarden API URL
      ansible.builtin.set_fact:
        vaultwarden_api_url_remote: "http://{{ hostvars[vaultwarden_destination_host].ansible_host }}:{{ vaultwarden_frontend_port }}"

    - name: Read Argon2 VaultWarden admin token from file
      ansible.builtin.slurp:
        src: "{{ vaultwarden_config_output_dir }}/vaultwarden-admin-token-argon2.txt"
      register: vaultwarden_admin_token_argon2_file
      delegate_to: localhost

    - name: Set fact for Argon2 VaultWarden admin token
      ansible.builtin.set_fact:
        vaultwarden_admin_token_argon2: "{{ vaultwarden_admin_token_argon2_file.content | b64decode | regex_replace('\\$', '\\$\\$') }}"

    - name: Get portainer token and endpoints map
      ansible.builtin.include_role:
        name: get-portainer-token-and-endpoints-map

    - name: Ensure VaultWarden directories exist
      ansible.builtin.include_role:
        name: ensure-directories-exist
      vars:
        target_hosts: "{{ destination_host }}"

    - name: Ensure the base directory for Vaultwarden output config exists
      ansible.builtin.file:
        path: "{{ vaultwarden_config_output_dir }}"
        state: directory
        mode: "0755"
      delegate_to: "localhost"

    - name: Render vaulwarden-compose.yaml from template
      ansible.builtin.template:
        src: "{{ docker_compose_template }}"
        dest: "{{ docker_compose_output }}"
        mode: "0644"
      vars:
        signups_allowed: false
        signups_verify: true
        invitations_allowed: false
      delegate_to: localhost
      register: rendered_compose_file

    - name: Deploy VaultWarden through Portainer
      ansible.builtin.include_role:
        name: deploy-through-portainer
      vars:
        portainer_endpoint_name: "{{ destination_host }}"
        portainer_stack_name: "{{ service_name }}"
        portainer_stack_env: '[{\"name\": \"ADMIN_TOKEN\", \"value\": \"{{ vaultwarden_admin_token_argon2 }}\"}]'
        service_compose_file: "{{ docker_compose_output }}"
        service_compose_file_changed: "{{ rendered_compose_file.changed }}"

    - name: Add DNS rewrite for VaultWarden
      ansible.builtin.include_role:
        name: add-dns-rewrite
      vars:
        rewrite_domain: "{{ subdomain }}.{{ cluster_domain }}"
        rewrite_answer: "{{ hostvars[destination_host].ansible_host }}"

    - name: Add VaultWarden to Homer Dashboard
      ansible.builtin.include_role:
        name: add-to-homer
      vars:
        homer_service_name: "Services"
        homer_item:
          name: "Passwords"
          subtitle: "VaultWarden"
          url: "https://{{ subdomain }}.{{ cluster_domain }}"
          target: "_blank"
          logo: "logo-vaultwarden.svg"