---
- name: Deploy portainer
  hosts: management
  become: no
  vars:
    portainer_data_path: "/storage/portainer/data"
    portainer_container_name: "portainer"
    portainer_api_url: "http://localhost:9000/api"
    portainer_api_url_remote: "http://{{ hostvars[inventory_hostname].ansible_host }}:9000/api"
    certs_base_path: "{{ output_path }}/{{ cluster_name }}/certificates"
  vars_files:
    - vars/common.yaml
    - "{{ inventory_dir }}/docker-images.yaml"
    - "{{ inventory_dir }}/secrets.yaml"

  tasks:
    - name: Ensure Portainer data directory exists
      ansible.builtin.file:
        path: "{{ portainer_data_path }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Ensure Portainer container is running
      community.docker.docker_container:
        name: "{{ portainer_container_name }}"
        image: "{{ portainer_image }}"
        restart_policy: unless-stopped
        ports:
          - "9000:9000"
          - "8000:8000"
        volumes:
          - "{{ portainer_data_path }}:/data"
        state: started

    - name: Wait for Portainer API to be ready
      ansible.builtin.uri:
        url: "http://localhost:9000/api/status"
        method: GET
        return_content: yes
        status_code: 200
      register: portainer_status
      until: portainer_status.status == 200
      retries: 10
      delay: 5

    - name: Check if Portainer admin user is already initialized
      ansible.builtin.uri:
        url: "http://localhost:9000/api/users/admin/check"
        method: GET
        return_content: yes
        status_code: [ 204, 404 ]
      register: admin_check

    - name: Initialize Portainer admin user if not set
      ansible.builtin.uri:
        url: "http://localhost:9000/api/users/admin/init"
        method: POST
        body_format: json
        body:
          username: "{{ portainer_admin_user }}"
          password: "{{ portainer_admin_password }}"
        headers:
          Content-Type: "application/json"
        status_code: 200
      when: admin_check.status == 404

    - name: Obtain Portainer API token
      ansible.builtin.uri:
        url: "{{ portainer_api_url }}/auth"
        method: POST
        body_format: json
        body:
          username: "{{ portainer_admin_user }}"
          password: "{{ portainer_admin_password }}"
        headers:
          Content-Type: "application/json"
        status_code: 200
      register: portainer_auth

    - name: Set API token as a fact
      ansible.builtin.set_fact:
        portainer_api_token: "{{ portainer_auth.json.jwt }}"

    - name: Get existing Portainer endpoints
      ansible.builtin.uri:
        url: "{{ portainer_api_url }}/endpoints"
        method: GET
        headers:
          Authorization: "Bearer {{ portainer_api_token }}"
        return_content: true
      register: existing_endpoints

    - name: Parse existing endpoints
      ansible.builtin.set_fact:
        existing_endpoints_map: "{{ existing_endpoints.json | items2dict(key_name='Name', value_name='Id') }}"

    - name: Debug
      ansible.builtin.debug:
        var: existing_endpoints_map

    - name: Create missing endpoints
      ansible.builtin.shell: |
        # Using curl instead of ansible.builtin.uri to ensure correct file uploads
        curl -X POST "{{ portainer_api_url_remote }}/endpoints" \
          -H "Authorization: Bearer {{ portainer_api_token }}" \
          -F "Name={{ item }}" \
          -F "EndpointCreationType=1" \
          -F "ContainerEngine=docker" \
          -F "URL=tcp://{{ hostvars[item].ansible_host }}:2376" \
          -F "TLS=true" \
          -F "TLSSkipVerify=false" \
          -F "TLSSkipClientVerify=false" \
          -F "TLSCACertFile=@{{ certs_base_path }}/{{ cluster_name }}_root_ca_crt.pem;type=application/x-x509-ca-cert" \
          -F "TLSCertFile=@{{ certs_base_path }}/signed/docker-daemon-{{ item }}/docker-daemon-{{ item }}_crt.pem;type=application/pkix-cert" \
          -F "TLSKeyFile=@{{ certs_base_path }}/signed/docker-daemon-{{ item }}/docker-daemon-{{ item }}_key.pem;type=application/x-pem-file"
      delegate_to: localhost
      with_items: "{{ groups['docker_hosts'] }}"
      when: item not in existing_endpoints_map
      # We use curl because ansible.builtin.uri does not preserve line endings in multipart file uploads

    - name: Copy TLS CA certificates for existing endpoints
      ansible.builtin.copy:
        src: "{{ certs_base_path }}/{{ cluster_name }}_root_ca_crt.pem"
        dest: "{{ portainer_data_path }}/tls/{{ existing_endpoints_map[item] }}/ca.pem"
        owner: root
        group: root
        mode: '0600'
      with_items: "{{ existing_endpoints_map.keys() }}"

    - name: Copy TLS crt for existing endpoints
      ansible.builtin.copy:
        src: "{{ certs_base_path }}/signed/docker-daemon-{{ item }}/docker-daemon-{{ item }}_crt.pem"
        dest: "{{ portainer_data_path }}/tls/{{ existing_endpoints_map[item] }}/cert.pem"
        owner: root
        group: root
        mode: '0600'
      with_items: "{{ existing_endpoints_map.keys() }}"

    - name: Copy TLS key for existing endpoints
      ansible.builtin.copy:
        src: "{{ certs_base_path }}/signed/docker-daemon-{{ item }}/docker-daemon-{{ item }}_key.pem"
        dest: "{{ portainer_data_path }}/tls/{{ existing_endpoints_map[item] }}/key.pem"
        owner: root
        group: root
        mode: '0600'
      with_items: "{{ existing_endpoints_map.keys() }}"
