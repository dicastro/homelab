---
- name: Deploy AdGuardHome to Portainer
  hosts: management
  gather_facts: false
  become: no
  vars:
    service_name: "adguardhome"
    destination_host: "dns"
    frontend_port: "3000"
    docker_compose_template: "adguardhome/adguardhome-compose.yaml.j2"
    docker_compose_output: "{{ output_path }}/{{ cluster_name }}/docker-compose/adguardhome-compose.yaml"
    adguardhome_subdomain: "dns"
    adguardhome_config_template: "adguardhome/adguardhome-config.yaml.j2"
    adguardhome_config_output: "{{ output_path }}/{{ cluster_name }}/configs/adguardhome/adguardhome-config.yaml"
    adguardhome_storage_base_dir: "/storage/adguardhome"
    adguardhome_config_dir: "{{ adguardhome_storage_base_dir }}/conf"
    adguardhome_volumes:
      - "{{ adguardhome_storage_base_dir }}/work:/opt/adguardhome/work"
      - "{{ adguardhome_config_dir }}:/opt/adguardhome/conf"
  vars_files:
    - vars/common.yaml
    - "{{ inventory_dir }}/docker-images.yaml"
    - "{{ inventory_dir }}/secrets.yaml"

  tasks:
    - name: Get portainer token and endpoints map
      ansible.builtin.include_role:
        name: get-portainer-token-and-endpoints-map

    - name: Ensure required directories exist on the destination host
      ansible.builtin.file:
        path: "{{ item.split(':')[0] }}"
        state: directory
        mode: "0700"
      loop: "{{ adguardhome_volumes }}"
      delegate_to: "{{ destination_host }}"

    - name: Ensure the base directory for docker-compose output exists
      ansible.builtin.file:
        path: "{{ docker_compose_output | dirname }}"
        state: directory
        mode: "0755"
      delegate_to: "localhost"

    - name: Generate adguardhome-compose.yaml from template
      ansible.builtin.template:
        src: "{{ docker_compose_template }}"
        dest: "{{ docker_compose_output }}"
        mode: "0644"
      delegate_to: "localhost"
      register: adguardhome_compose_file

    - name: Ensure the base directory for AdGuardHome output config exists
      ansible.builtin.file:
        path: "{{ adguardhome_config_output | dirname }}"
        state: directory
        mode: "0755"
      delegate_to: "localhost"

    - name: Generate bcrypt password for AdGuard Home admin password
      ansible.builtin.include_role:
        name: generate-bcrypt-password
      vars:
        password_plaintext: "{{ adguardhome_admin_password }}"
        password_checksum_file: "{{ output_path }}/{{ cluster_name }}/configs/adguardhome/adguardhome-admin-password-hash.txt"
        password_bcrypt_file: "{{ output_path }}/{{ cluster_name }}/configs/adguardhome/adguardhome-admin-password.txt"

    - name: Store the generated bcrypt password into a specific variable
      ansible.builtin.set_fact:
        adguardhome_admin_password_bcrypt: "{{ password_bcrypt }}"
        adguardhome_admin_password_changed: "{{ password_changed }}"

    - name: Generate adguardhome-config.yaml from template
      ansible.builtin.template:
        src: "{{ adguardhome_config_template }}"
        dest: "{{ adguardhome_config_output }}"
        mode: "0644"
      delegate_to: "localhost"
      register: adguardhome_config_file
      vars:
        rewrite_answer: "{{ hostvars[destination_host].ansible_host }}"
      when: adguardhome_admin_password_changed or not (adguardhome_config_output is file)

    - name: Upload new AdGuardHome config
      ansible.builtin.copy:
        src: "{{ adguardhome_config_output }}"
        dest: "{{ adguardhome_config_dir }}/AdGuardHome.yaml"
        mode: "0644"
      delegate_to: "{{ destination_host }}"
      when: adguardhome_config_file.changed

    - name: Deploy AdGuard Home through Portainer
      ansible.builtin.include_role:
        name: deploy-through-portainer
      vars:
        portainer_endpoint_name: "{{ destination_host }}"
        portainer_stack_name: "{{ service_name }}"
        service_compose_file: "{{ docker_compose_output }}"
        service_compose_file_changed: "{{ adguardhome_compose_file.changed }}"