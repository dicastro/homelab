---
- name: Deploy MailRise to Portainer
  hosts: management
  gather_facts: false
  become: no
  vars:
    service_name: "mailrise"
    destination_host: "management"
    certificate_tools_path: "{{ output_path }}/{{ cluster_name }}"
    portainer_api_url: "http://localhost:9000/api"
    portainer_api_url_remote: "http://{{ hostvars[inventory_hostname].ansible_host }}:9000/api"
    portainer_destination_endpoint: "{{ destination_host }}"
    portainer_stack_name: "{{ service_name }}"
    docker_compose_template: "mailrise/mailrise-compose.yaml.j2"
    docker_compose_output: "{{ output_path }}/{{ cluster_name }}/docker-compose/mailrise-compose.yaml"
    proxmox_notification_target_name: "{{ service_name }}"
    mailrise_config_template: "mailrise/mailrise.conf.j2"
    mailrise_config_output: "{{ output_path }}/{{ cluster_name }}/configs/mailrise/mailrise.conf"
    mailrise_container_user: "mailrise"
    mailrise_storage_base_dir: "/storage/mailrise"
    mailrise_config_dir: "{{ mailrise_storage_base_dir }}/config"
    mailrise_config_file: "{{ mailrise_config_dir }}/mailrise.conf"
    mailrise_certs_dir: "{{ mailrise_storage_base_dir }}/certs"
    mailrise_crt_file: "{{ mailrise_certs_dir }}/mailrise_crt.pem"
    mailrise_key_file: "{{ mailrise_certs_dir }}/mailrise_key.pem"
    mailrise_telegram_url: "tgram://{{ telegram_notification_bot_token }}/{{ telegram_chat_id }}"
    mailrise_volumes:
      - "{{ mailrise_config_file }}:/etc/mailrise.conf:ro"
      - "{{ mailrise_crt_file }}:/home/{{ mailrise_container_user }}/mailrise_crt.pem:ro"
      - "{{ mailrise_key_file }}:/home/{{ mailrise_container_user }}/mailrise_key.pem:ro"
  vars_files:
    - vars/common.yaml
    - "{{ inventory_dir }}/docker-images.yaml"
    - "{{ inventory_dir }}/secrets.yaml"

  tasks:
    - name: Wait for Portainer API to be ready
      ansible.builtin.uri:
        url: "http://localhost:9000/api/status"
        method: GET
        return_content: yes
        status_code: 200
      register: portainer_status
      until: portainer_status.status == 200
      retries: 10
      delay: 5

    - name: Obtain Portainer API token
      ansible.builtin.uri:
        url: "{{ portainer_api_url }}/auth"
        method: POST
        body_format: json
        body:
          username: "{{ portainer_admin_user }}"
          password: "{{ portainer_admin_password }}"
        headers:
          Content-Type: "application/json"
        status_code: 200
      register: portainer_auth

    - name: Set API token as a fact
      ansible.builtin.set_fact:
        portainer_api_token: "{{ portainer_auth.json.jwt }}"

    - name: Get existing Portainer endpoints
      ansible.builtin.uri:
        url: "{{ portainer_api_url }}/endpoints"
        method: GET
        headers:
          Authorization: "Bearer {{ portainer_api_token }}"
        return_content: true
      register: existing_endpoints

    - name: Parse existing endpoints
      ansible.builtin.set_fact:
        existing_endpoints_map: "{{ existing_endpoints.json | items2dict(key_name='Name', value_name='Id') }}"

    - name: Existing endpoints
      ansible.builtin.debug:
        var: existing_endpoints_map

    - name: Set endpoint ID from name
      ansible.builtin.set_fact:
        endpoint_id: "{{ existing_endpoints_map[portainer_destination_endpoint] }}"

    - name: Endpoint selected
      ansible.builtin.debug:
        var: endpoint_id

    - name: Ensure required directories exist on the destination host
      ansible.builtin.file:
        path: "{{ item.split(':')[0] }}"
        state: directory
        mode: "0700"
      loop: "{{ mailrise_volumes }}"
      delegate_to: "{{ destination_host }}"
      when: item.split(':')[0] is string and item.split(':')[0] == item.split(':')[0] | dirname

    - name: Ensure required folders exist on the destination host
      ansible.builtin.file:
        path: "{{ item.split(':')[0] | dirname }}"
        state: directory
        mode: "0700"
      loop: "{{ mailrise_volumes }}"
      delegate_to: "{{ destination_host }}"
      when: item.split(':')[0] is string and item.split(':')[0] != item.split(':')[0] | dirname

    - name: Ensure the base directory for docker-compose output exists
      ansible.builtin.file:
        path: "{{ docker_compose_output | dirname }}"
        state: directory
        mode: "0755"
      delegate_to: "localhost"

    - name: Generate mailrise-compose.yaml from template
      ansible.builtin.template:
        src: "{{ docker_compose_template }}"
        dest: "{{ docker_compose_output }}"
        mode: "0644"
      delegate_to: "localhost"
      register: mailrise_compose_file

    - name: Ensure the base directory for MailRise output config exists
      ansible.builtin.file:
        path: "{{ mailrise_config_output | dirname }}"
        state: directory
        mode: "0755"
      delegate_to: "localhost"

    - name: Generate mailrise.conf from template
      ansible.builtin.template:
        src: "{{ mailrise_config_template }}"
        dest: "{{ mailrise_config_output }}"
        mode: "0644"
      delegate_to: "localhost"
      register: mailrise_config_parsed_template

    - name: Upload new MailRise config
      ansible.builtin.copy:
        src: "{{ mailrise_config_output }}"
        dest: "{{ mailrise_config_file }}"
        mode: "0644"
      delegate_to: "{{ destination_host }}"
      when: mailrise_config_parsed_template.changed

    - name: Generate signed certificate for MailRise
      ansible.builtin.command:
        cmd: >
          python scripts/generate-signed-certificate.py
          --base-path {{ certificate_tools_path }}
          --ca-alias {{ cluster_name }}
          --ca-cn "{{ cluster_name }} root ca"
          --signed-alias "{{ service_name }}"
          --signed-cn "{{ service_name }}.{{ cluster_domain }}"
          --signed-san-ip {{ hostvars[destination_host].ansible_host }}
          --output-format ansible
      register: signed_cert_output
      changed_when: (signed_cert_output.stdout | from_json).changed
      delegate_to: localhost

    - name: Parse output of signed certificate generation
      ansible.builtin.set_fact:
        ca_crt_path: "{{ (signed_cert_output.stdout | from_json).details['ca-crt-path'] }}"
        signed_crt_path: "{{ (signed_cert_output.stdout | from_json).details['signed-crt-path'] }}"
        signed_key_path: "{{ (signed_cert_output.stdout | from_json).details['signed-key-path'] }}"
      changed_when: false

    - name: Ensure CA certificate is copied to Proxmox
      ansible.builtin.copy:
        src: "{{ ca_crt_path }}"
        dest: "/usr/local/share/ca-certificates/{{ cluster_name }}_root_ca.crt"
        mode: "644"
      delegate_to: pve
      notify: Update trusted CAs

    - name: Copy certificates to MailRise
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "0644"
      loop:
        - { src: "{{ signed_crt_path }}", dest: "{{ mailrise_crt_file }}" }
        - { src: "{{ signed_key_path }}", dest: "{{ mailrise_key_file }}" }

    - name: Check if stack exists in Portainer
      ansible.builtin.uri:
        url: "{{ portainer_api_url }}/stacks?filters={\"EndpointId\":{{ endpoint_id }}}"
        method: GET
        headers:
          Authorization: "Bearer {{ portainer_api_token }}"
          Content-Type: "application/json"
        status_code: 200
      register: portainer_stacks_response

    - name: Get stack matching name
      set_fact:
        stack_candidates: "{{ portainer_stacks_response.json | selectattr('Name', 'equalto', portainer_stack_name) | list }}"

    - name: Find stack by name
      set_fact:
        portainer_stack_found: "{{ stack_candidates[0] }}"
      when: stack_candidates | length > 0

    - name: Set fact if stack exists
      ansible.builtin.set_fact:
        stack_exists: "{{ portainer_stack_found is defined }}"

    - name: Stack already created
      ansible.builtin.debug:
        var: stack_exists

    - name: Deploy stack to Portainer (Create or Update)
      ansible.builtin.shell: |
        # Using curl instead of ansible.builtin.uri to ensure correct file uploads
        curl -X POST "{{ portainer_api_url_remote }}/stacks/create/standalone/file?endpointId={{ endpoint_id }}" \
          -H "Authorization: Bearer {{ portainer_api_token }}" \
          -F "Name={{ portainer_stack_name }}" \
          -F "file=@{{ docker_compose_output }}" \
      delegate_to: localhost
      when: mailrise_compose_file.changed or not stack_exists

    - name: Authenticate to Proxmox API
      uri:
        url: "https://localhost:8006/api2/json/access/ticket"
        method: POST
        body_format: form-urlencoded
        body:
          username: "{{ proxmox_user }}@pam"
          password: "{{ proxmox_password }}"
        validate_certs: false
      delegate_to: pve
      register: proxmox_login_response

    - name: Check if SMTP target already exists
      uri:
        url: "https://localhost:8006/api2/json/cluster/notifications/targets"
        method: GET
        headers:
          Cookie: "PVEAuthCookie={{ proxmox_login_response.json.data.ticket }}"
          CSRFPreventionToken: "{{ proxmox_login_response.json.data.CSRFPreventionToken }}"
        validate_certs: false
      delegate_to: pve
      register: proxmox_existing_notification_targets

    - name: Determine if SMTP target exists
      set_fact:
        proxmox_notification_target_exists: "{{ proxmox_notification_target_name in proxmox_existing_notification_targets.json.data | map(attribute='name') | list }}"

    - name: Add notification target
      uri:
        url: "https://localhost:8006/api2/json/cluster/notifications/endpoints/smtp"
        method: POST
        headers:
          Cookie: "PVEAuthCookie={{ proxmox_login_response.json.data.ticket }}"
          CSRFPreventionToken: "{{ proxmox_login_response.json.data.CSRFPreventionToken }}"
        validate_certs: false
        body_format: json
        body:
          name: "mailrise"
          comment: "Send notifications to Telegram chatbot using MailRise"
          mailto: "telegram@mailrise.xyz"
          server: "{{ hostvars[destination_host].ansible_host }}"
          port: 8025
          from-address: "root@pve.local"
          username: "{{ mailrise_admin_user }}"
          password: "{{ mailrise_admin_password }}"
          mode: "starttls"
        status_code: 200
      delegate_to: pve
      when: not proxmox_notification_target_exists
      register: add_notification_target_result

  handlers:
    - name: Update trusted CAs
      ansible.builtin.command: update-ca-certificates
      delegate_to: pve
      register: update_trusted_cas_result
      changed_when: "'0 added, 0 removed' not in update_trusted_cas_result.stdout"
