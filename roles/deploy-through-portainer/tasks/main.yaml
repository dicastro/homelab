# Role: deploy-through-portainer
#
# This role deploys or updates a Docker Compose stack in Portainer using the API.
# It checks if the stack already exists and decides whether to create or update it.
#
# INPUT VARIABLES:
# ----------------
# portainer_api_token           (string)   JWT token for authenticating with Portainer API
# portainer_endpoint_name       (string)   Name of the endpoint (e.g., "local") to deploy the stack to
# portainer_stack_name          (string)   The name of the stack to check or create/update
# portainer_stack_env           (string)   The environment variables of the stack
# service_compose_file          (string)   Path to the Docker Compose file to deploy
# service_compose_file_changed  (boolean)  A boolean flag indicating whether the compose file has changed
#
# OUTPUT FACTS:
# -------------
#
#
# NOTES:
#   - This role uses `curl` instead of the `uri` module to support `multipart/form-data` for file uploads (required by the Portainer stacks API).
#   - It checks stack existence by filtering based on the name and endpoint ID.
#   - Delegation to the `management` host is used for API interactions.
#   - File upload is performed locally (`delegate_to: localhost`) assuming the compose file is local.
#
- name: Set Portainer API URLs
  ansible.builtin.set_fact:
    portainer_api_url: "http://localhost:{{ portainer_frontend_port }}/api"
    portainer_api_url_remote: "http://{{ hostvars[portainer_destination_host].ansible_host }}:{{ portainer_frontend_port }}/api"

- name: Clearing facts
  ansible.builtin.set_fact:
    portainer_stack_found: null

- name: Initializing default Portainer Env
  ansible.builtin.set_fact:
    portainer_stack_env: "[]"
  when: portainer_stack_env is not defined

- name: Set endpoint ID from name
  ansible.builtin.set_fact:
    endpoint_id: "{{ portainer_endpoints_map[portainer_endpoint_name] }}"

- name: Endpoint selected
  ansible.builtin.debug:
    var: endpoint_id

- name: Check if stack exists in Portainer
  ansible.builtin.uri:
    url: "{{ portainer_api_url }}/stacks?filters={\"EndpointId\":{{ endpoint_id }}}"
    method: GET
    headers:
      Authorization: "Bearer {{ portainer_api_token }}"
      Content-Type: "application/json"
    status_code: 200
  register: portainer_stacks_response
  delegate_to: management

- name: Get stack matching name
  ansible.builtin.set_fact:
    portainer_stack_candidates: "{{ portainer_stacks_response.json | selectattr('Name', 'equalto', portainer_stack_name) | list }}"

- name: Find stack by name
  ansible.builtin.set_fact:
    portainer_stack_found: "{{ portainer_stack_candidates[0] }}"
  when: portainer_stack_candidates | length > 0

- name: Set fact if stack exists
  ansible.builtin.set_fact:
    portainer_stack_exists: "{{ portainer_stack_found is defined and portainer_stack_found is not none }}"

- name: Deploy stack to Portainer (Create or Update)
  ansible.builtin.shell: |
    # Using curl instead of ansible.builtin.uri to ensure correct file uploads
    curl -X POST "{{ portainer_api_url_remote }}/stacks/create/standalone/file?endpointId={{ endpoint_id }}" \
      -H "Authorization: Bearer {{ portainer_api_token }}" \
      -F "Name={{ portainer_stack_name }}" \
      -F "Env={{ portainer_stack_env }}" \
      -F "file=@{{ service_compose_file }}" \
  delegate_to: localhost
  when: service_compose_file_changed or not portainer_stack_exists