# Role: get-portainer-token-and-endpoints-map
#
# This role authenticates with the Portainer API, retrieves existing endpoints,
# and maps them to a dictionary keyed by their name for easy lookup.
#
# INPUT VARIABLES:
# ----------------
#
#
# OUTPUT FACTS:
# -------------
# portainer_api_token      (string)  The JWT token returned by the Portainer API after authentication
# portainer_endpoints_map  (map)     A dictionary mapping endpoint names to their numeric IDs, e.g. { "local": 1, "remote-docker": 2 }

- name: Set Portainer API URL
  set_fact:
    portainer_api_url: "http://localhost:{{ portainer_frontend_port }}/api"

- name: Wait for Portainer API to be ready
  ansible.builtin.uri:
    url: "{{ portainer_api_url }}/status"
    method: GET
    return_content: yes
    status_code: 200
  register: portainer_status
  until: portainer_status.status == 200
  retries: 10
  delay: 5
  delegate_to: management

- name: Obtain Portainer API token
  ansible.builtin.uri:
    url: "{{ portainer_api_url }}/auth"
    method: POST
    body_format: json
    body:
      username: "{{ portainer_admin_user }}"
      password: "{{ portainer_admin_password }}"
    headers:
      Content-Type: "application/json"
    status_code: 200
  register: portainer_auth
  delegate_to: management

- name: Set API token as a fact
  ansible.builtin.set_fact:
    portainer_api_token: "{{ portainer_auth.json.jwt }}"

- name: Get existing Portainer endpoints
  ansible.builtin.uri:
    url: "{{ portainer_api_url }}/endpoints"
    method: GET
    headers:
      Authorization: "Bearer {{ portainer_api_token }}"
    return_content: true
  register: portainer_existing_endpoints
  delegate_to: management

- name: Parse existing endpoints
  ansible.builtin.set_fact:
    portainer_endpoints_map: "{{ portainer_existing_endpoints.json | items2dict(key_name='Name', value_name='Id') }}"

- name: Existing endpoints
  ansible.builtin.debug:
    var: portainer_endpoints_map